from S5.Tecplot import TecplotData, TPHeaderZone
import pandas as pd
import numpy as np
from S5.HPC.optimisation import set_mean


def write_vel(tvel, outfile=None):
    '''
    create Target Velocity files with constant velocity profile.
    :param tvel: target velocity
    :param outfile: filename
    '''
    if outfile is None:
        outfile = "TargetVel.dat"

    vel_file = TecplotData()
    vel_file.zone = TPHeaderZone()
    if type(tvel) is pd.DataFrame:
        assert "Distance (km)" in tvel.columns, "column  \"Distance (km)\" missing from dataframe at S5.HPC.file_io.write_vel"
        assert "TargetVel (km/h)" in tvel.columns, "column  \"TargetVel (km/h)\" missing from dataframe at S5.HPC.file_io.write_vel"
        vel_file.data = tvel[["Distance (km)", "TargetVel (km/h)"]]
        vel_file.zone.ni = tvel.shape[0]
    else:
        tvel = float(tvel)
        vel_file.data = pd.DataFrame([[0, tvel], [3030, tvel]])
        vel_file.data.columns = ["Distance (km)", "TargetVel (km/h)"]
        vel_file.zone.ni = 2
    vel_file.title = "Velocity file generated by S5.HPC"
    vel_file.zone.zonetitle = "tvel"
    vel_file.write_tecplot(outfile)



def read_history(histfile=None):
    """return driving_time,dist,soc,avg_vel"""
    hist_tp = TecplotData()
    hist_tp.readfile(histfile)
    # finish time in duration
    # finish SoC
    # check if soc reach 0
    try:
        [driving_time, dist, soc, avg_vel] = hist_tp.data.loc[:, ['DrivingTime(s)', 'Distance(km)', 'BatteryCharge(%)',
                                                              'AverageCarVel(km/h)']].iloc[-1, :].to_list()
    except KeyError: # to catch new history file that do not have average car vel col
        [driving_time, dist, soc] = hist_tp.data.loc[:, ['DrivingTime(s)', 'Distance(km)', 'BatteryCharge(%)',
                                                              ]].iloc[-1, :].to_list()
        # recalculate average vel using data in the History file. Note that due to downsampling in History file
        # there will be a small discrepancy between ones previously calculated in SolarSim and this one here
        avg_vel = hist_tp.data.loc[hist_tp.data['Driving']==1,"CarVel(km/h)"].mean()

    Vstd = np.std(hist_tp.data[hist_tp.data["Driving"]==1].loc[:,'CarVel(km/h)'])
    SoCMax = hist_tp.data.loc[:,'BatteryCharge(%)'].max()
    SoCMin = hist_tp.data.loc[:,'BatteryCharge(%)'].min()
    return driving_time, dist, soc, avg_vel, Vstd, SoCMax, SoCMin

def adjust_v(file,v_bar):
    x = file.data['Distance (km)']
    vel = file.data['TargetVel (km/h)']
    vel = set_mean(vel,v_bar,x,8)
    file.data['TargetVel (km/h)'] = vel
    return 1


def win2lin(filepath: str)->None:
    """ convert DSWSS input files from windown to linux compatiable (slashes from \ to /)
    :param filepath:
    """
    with open(filepath) as file:
        lines = file.readlines()
    for i,line in enumerate(lines):
        lines[i] = line.replace("\\","/")
    with open(filepath,"w") as file:
        file.writelines(lines)

def lin2win(filepath: str)->None:
    """ convert DSWSS input files from linus to windows compatiable (slashes from / to \)
    :param filepath:
    """
    with open(filepath,'r') as file:
        lines = file.readlines()
    for i,line in enumerate(lines):
        lines[i] = line.replace("/","\\")
    with open(filepath,"w") as file:
        file.writelines(lines)


if __name__ == '__main__':
    filename = "TargetVel.dat"
    tvel = 62
    write_vel(tvel, filename)

